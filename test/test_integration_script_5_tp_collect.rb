#!/usr/bin/env ruby

$LOAD_PATH.unshift File.join(File.dirname(File.dirname(__FILE__)), 'lib')

require 'minitest/autorun'
require 'typingpool'
require 'typingpool/test'

class TestTpCollect < Typingpool::Test::Script

  def test_collection_in_tp_collect_and_tp_review
    [{script: lambda{ |transcripts_dir, fixture| tp_collect_with_fixture(transcripts_dir, fixture) },
      fixtures: ['tp-collect-1', 'tp-collect-2', 'tp-collect-3'],
      prefix: 'tp_collect_'},
     {script: lambda{ |transcripts_dir, fixture| tp_review_with_fixture(transcripts_dir, fixture, %w(q), false)},
      fixtures: ['tp-review-7', 'tp-review-8', 'tp-review-9'],
      prefix: 'tp_review3_'}
    ].each do |script|
      with_temp_readymade_project do |dir|
        skip_if_no_upload_credentials('tp-collect integration test')
        skip_if_no_amazon_credentials('tp-collect integration test')
        copy_fixtures_to_project_dir(script[:prefix], File.join(dir, project_default[:title]))
        begin
          project = Typingpool::Project.new(project_default[:title], Typingpool::Config.file(config_path(dir)))
          assert_equal(6, project.local.subdir('audio', 'chunks').count, "Wrong number of audio files generated by tp_make")
          script[:script].call(dir, script[:fixtures].shift)
          transcript = assert_has_partial_transcript(project)
          assert_html_has_audio_count(2, transcript)
          assert_assignment_csv_has_transcription_count(2, project, 'sandbox-assignment.csv')
          script[:script].call(dir, script[:fixtures].shift)
          transcript = assert_has_partial_transcript(project)
          assert_html_has_audio_count(3, transcript)
          assert_assignment_csv_has_transcription_count(3, project, 'sandbox-assignment.csv')
          script[:script].call(dir, script[:fixtures].shift)
          transcript = assert_has_partial_transcript(project)
          assert_html_has_audio_count(5, transcript)
          assert_assignment_csv_has_transcription_count(5, project, 'sandbox-assignment.csv')
        ensure
          restore_project_dir_from_fixtures(script[:prefix], File.join(dir, project_default[:title]))
        end #begin
      end #with_temp_readymade_project do...
    end #each
  end

  end #TestTpCollect
