#!/usr/bin/env ruby

require 'typingpool'
require 'text/format'
require 'highline/import'

options = {
  :config => Typingpool::Config.file
}

OptionParser.new do |commands|
  options[:banner] = commands.banner = "USAGE: #{File.basename($PROGRAM_NAME) } [PROJECT]\n  [--config PATH] [--sandbox]\n"
  commands.on('--project=PROJECT', 'Path or name within dir $config_file:transcripts.', '  Also accepted as first argument to script.', '  If not specified, reviews pending results', '  for ALL projects') do |project|
    options[:project] = project
  end
  commands.on('--config=PATH', 'Default: ~/.typingpool') do |path|
    path = File.expand_path(path)
    File.exists?(path) && File.file?(path) or abort "No such file #{path}"
    options[:config] = Typingpool::Config.file(path)
  end
  commands.on('--sandbox', 'Test in Mechanical Turk\'s sandbox') do |sandbox|
    options[:sandbox] = true
  end
  commands.on('--fixture=PATH', "Optional. For testing purposes only.", "  A VCR ficture for running with mock data") do |fixture|
    options[:fixture] = fixture
  end
  commands.on('--help', "Display this screen") do
    STDERR.puts commands
    exit
  end
end.parse!

options[:banner] += "`#{File.basename($PROGRAM_NAME)} --help` for more information.\n"

if ARGV[0]
  if options[:project]
    abort "Duplicate project values ('#{ARGV[0]}' and '#{options[:project]}')"
  end
  options[:project] = ARGV[0]
end

if options[:project]
  if File.exists? options[:project]
    options[:config].transcripts = File.dirname(options[:project])
  else
    if not(options[:config].transcripts)
      abort "No 'transcripts' dir specified in your config file and #{options[:project]} is not a valid path"
    end
    options[:project] = File.join(options[:config].transcripts, options[:project])
    if not(File.exists? options[:project])
      abort "No such project #{File.basename(options[:project])} in dir #{File.dirname(options[:project])}"
    end
  end
  if not(File.directory? options[:project])
    abort "Project is not a directory at #{options[:project]}"
  end
  options[:project] = Typingpool::Project.new(File.basename(options[:project]), options[:config])
end

if options[:fixture]
  Typingpool::App.vcr_record(options[:fixture], options[:config])
end

Typingpool::Amazon.setup(:sandbox => options[:sandbox], :config => options[:config])

hits = []
if options[:project] && not((hit_ids = options[:project].local.csv('data', 'assignment.csv').map{|assignment| assignment['hit_id'] }.select{|hit_id| hit_id }).empty?)
  hits = Typingpool::Amazon::HIT.with_ids(hit_ids).select{|hit| hit.submitted? }
else
  hits = Typingpool::Amazon::HIT.all_reviewable{|hit| hit.submitted? && hit.ours? }
  if options[:project]
    #code path for projects assigned through RUI
    hits.select!{|hit| hit.project_id == options[:project].local.id }
  end
end

choices = %w(approve reject quit skip)
catch :quitting do
  hits_by_project_id = Typingpool::App.find_projects_waiting_for_hits(hits, options[:config]) 
  all_hits = hits_by_project_id.map{|id, hash| hash[:hits] }.flatten
  i = 0
  hits_by_project_id.values.each do |hash|
    hits = hash[:hits]
    project = hash[:project]
    hits.sort!{|a, b| a.url <=> b.url }
    hits.each do |hit|
      i += 1
      say(HighLine.color("Transcript for: ", :bold) + hit.url)
      project_info = HighLine.color("Project: ", :bold) + project.name
      if project.local.subtitle
        project_info += ": #{project.local.subtitle}"
      end
      say(project_info)
      say(HighLine.color("Submitted at: ", :bold) + hit.assignment.submitted_at.localtime.to_s + HighLine.color(" by ", :bold) + hit.assignment.worker_id)
      say(hit.transcript.body_as_text do |formatter|
            formatter.first_indent = 2
            formatter.body_indent = 2
          end)
      prompt = choices.map{|c| HighLine.color('(', :reverse) + HighLine.color(c.slice(0).upcase, :bold, :reverse) + HighLine.color(")#{c.slice(1, c.size)}", :reverse) }
      prompt << HighLine.color('[', :reverse) + prompt.pop + HighLine.color(']', :reverse)
      prompt = prompt.join(HighLine.color(', ', :reverse)) 
      prompt += HighLine.color('? ', :reverse)
      prompt += HighLine.color("(#{i}/#{all_hits.count}) ", :reverse)

      choice=nil
      until choice
        input = ask(prompt)
        if input.to_s.match(/^\s*$/)
          choice = choices.last
        elsif not(choice = choices.detect{|possible| possible[0] == input.downcase[0] })
          say("Invalid selection '#{input}'.")
        end
      end #until choice

      case choice
      when 'approve'
        hit.assignment.at_amazon.approve!
        Typingpool::App.record_approved_hits_in_project(project, [hit])
        Typingpool::App.create_transcript(project)
        say(HighLine.color("Approved. ", :bold) + "#{project.name} transcript updated.")
      when 'reject'
        reason=nil
        until reason.to_s.match(/\S/)
          reason = ask("Rejection reason, for worker: ")
        end
        hit.assignment.at_amazon.reject!(reason)
        hit.at_amazon.dispose!
        Typingpool::App.unrecord_hits_in_project(project, [hit])
        say(HighLine.color("Rejected", :bold))
      when 'quit'
        say(HighLine.color("Quitting", :bold))
        throw :quitting
      when 'skip'
        say(HighLine.color("Skipping", :bold))
        next
      end #case choice
    end #hits.each_with_index

  end #find_projects_waiting_for(...) do
end #catch :quitting do
project = options[:project]
if options[:fixture]
  Typingpool::App.vcr_stop
end
